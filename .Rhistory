ITERATIONS_SUBSET = NULL
)
library(plCFA)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = F
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
path <- st_fit$fit$path_av_theta[-c(1, nrow(st_fit$fit$path_av_theta)),]
path_shift <- st_fit$fit$path_av_theta[-c(1,2),]
diff <- (path_shift-path)
check <- apply(diff, MARGIN = 1, FUN = norm, type = "2")/apply(path, MARGIN = 1, FUN = norm, type = "2")
check
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
check_level <- 1e-6
gg_norm <- tibble(iter = 1:length(test), check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
library(plCFA)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = F
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
path <- st_fit$fit$path_av_theta[-c(1, nrow(st_fit$fit$path_av_theta)),]
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
check_level <- 1e-6
gg_norm <- tibble(iter = 1:length(test), check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
path <- st_fit$fit$path_av_theta[-c(1, nrow(st_fit$fit$path_av_theta)),]
path_shift <- st_fit$fit$path_av_theta[-c(1,2),]
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
check_level <- 1e-6
gg_norm <- tibble(iter = 1:length(test), check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
library(plCFA)
check_level <- 1e-6
gg_norm <- tibble(iter = 1:length(test), check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
test
test[length(test)]
test[(length(test)-10):length(test)]
st_fit$fit$checkPar
gg_norm <- tibble(iter = 1:length(st_fit$fit$checkPar), check = st_fit$fit$checkPar
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 16,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
K*20
gg_norm <- tibble(iter = 1:length(st_fit$fit$checkPar), check = st_fit$fit$checkPar
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
library(plCFA)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
path <- st_fit$fit$path_av_theta[-c(1, nrow(st_fit$fit$path_av_theta)),]
path_shift <- st_fit$fit$path_av_theta[-c(1,2),]
diff <- (path_shift-path)
check <- apply(diff, MARGIN = 1, FUN = norm, type = "2")/apply(path, MARGIN = 1, FUN = norm, type = "2")
check
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
check_level <- 1e-6
gg_norm <- tibble(iter = 1:length(st_fit$fit$checkPar), check = st_fit$fit$checkPar
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
gg_norm <- tibble(iter = st_fit$iterations_subset, check = st_fit$fit$checkPar
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
st_fit$iterations_subset
st_fit
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
library(plCFA)
st_fit
st_fit$fit$path_av_theta
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
seed <- 1
set.seed(seed)
p <- 40; q <- 4; n <- 5000
constrMat <- build_constrMat(p,q,'simple')
true_load <- gen_loadings(FIXED = NULL, CONSTRAINT_MAT = constrMat, SEED = seed)
true_tau <- c(-1.2, 0, 1.2)
mat <- matrix(runif(q*q, 0.3,.7),q,q)
mat[!lower.tri(mat)] <- 0
mat <- mat + t(mat)
diag(mat) <- 1
true_latent <- mat
#true_latent <- matrix(.212,q,q); diag(true_latent) <- 1
# true_latent <- matrix(c(1,0.5995658,0.4935413,
#   0.5995658,1,0.6684667,
#   0.4935413,0.6684667,1),q,q)
true_theta <- get_theta(rep(true_tau, p), true_load, true_latent, cat, constrMat, 0)
seed1 <- 16
manifest <- gen_URV_data(n, true_load, true_tau, true_latent,
SEED = seed1)
##############
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
##############
eta <- 7
K = p*(p-1)/2; K
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
st_fit
st_fit$iterations_subset
st_fit$fit$last_iter
st_fit$fit$path_av_theta[st_fit$fit$last_iter,]
st_fit$fit$path_av_theta[st_fit$fit$last_iter+1,]
st_fit$fit$path_av_theta[st_fit$fit$last_iter+2,]
library(plCFA)
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
st_fit$iterations_subset
library(plCFA)
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
st_fit$iterations_subset
st_fit$iterations_subset[st_fit$iterations_subset <= st_fit$fit$last_iter]
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
st_fit$iterations_subset
st_fit$iterations_subset[length(st_fit$iterations_subset)]
st_fit$iterations_subset[(length(st_fit$iterations_subset)-10):length(st_fit$iterations_subset)]
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
path <- st_fit$fit$path_av_theta[-c(1, nrow(st_fit$fit$path_av_theta)),]
path_shift <- st_fit$fit$path_av_theta[-c(1,2),]
diff <- (path_shift-path)
check <- apply(diff, MARGIN = 1, FUN = norm, type = "2")/apply(path, MARGIN = 1, FUN = norm, type = "2")
st_fit
st_fit$iterations_subse
st_fit$fit$last_iter
st_fit$fit$path_av_theta[st_fit$fit$last_iter+2,]
st_fit$fit$path_av_theta[,]
st_fit$fit$path_av_theta
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = my_seq
)
st_fit$iterations_subset
my_seq
library(plCFA)
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = eta,
PAIRS_PER_ITERATION = 1,
PROB = 5/K,
SEED = seed1,
CHECKCONVERGENCE = T
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = my_seq
)
st_fit$iterations_subset[(length(st_fit$iterations_subset)-10):length(st_fit$iterations_subset)]
st_fit$iterations_subset
st_fit$fit$last_iter
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = my_seq
)
path <- st_fit$fit$path_av_theta[-c(1, nrow(st_fit$fit$path_av_theta)),]
path_shift <- st_fit$fit$path_av_theta[-c(1,2),]
st_fit$iterations_subset
gg_norm <- tibble(iter = st_fit$iterations_subset, check = st_fit$fit$checkPar
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
library(tidyverse)
gg_norm <- tibble(iter = st_fit$iterations_subset, check = st_fit$fit$checkPar[st_fit$iterations_subset]
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
st_fit$fit$checkPar
gg_norm <- tibble(iter = st_fit$iterations_subset, check = st_fit$fit$checkPar[st_fit$iterations_subset-1]
) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
length(st_fit$fit$checkPar)
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
test
gg_norm <- tibble(iter = st_fit$iterations_subset, check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
path <- st_fit$fit$path_av_theta[-nrow(st_fit$fit$path_av_theta),]
path_shift <- st_fit$fit$path_av_theta[-1,]
diff <- (path_shift-path)
check <- apply(diff, MARGIN = 1, FUN = norm, type = "2")/apply(path, MARGIN = 1, FUN = norm, type = "2")
check
length(st_fit$iterations_subset)
st_fit$iterations_subset
gg_norm <- tibble(iter = st_fit$iterations_subset[-1], check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
return(check)
#'@export
diagnosis_pNorm <- function(MOD_OBJ, LABEL = 'path_av_theta'){
path <- MOD_OBJ$fit[[LABEL]][-nrow(MOD_OBJ$fit[[LABEL]]),]
shift <- MOD_OBJ$fit[[LABEL]][-1,]
normFun <- function(x){sqrt(crossprod(x))}
diff <- shift - path
check <- apply(diff, MARGIN = 1, FUN = normFun)/apply(path, MARGIN = 1, FUN = normFun)
return(check)
}
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
check_level <- 1e-6
gg_norm <- tibble(iter = st_fit$iterations_subset[-1], check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = my_seq
)
st_fit$fit$checkPar
length(st_fit$fit$checkPar)
st_fit$fit$last_iter
library(plCFA)
st_fit <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = my_seq
)
path <- st_fit$fit$path_av_theta[-nrow(st_fit$fit$path_av_theta),]
path_shift <- st_fit$fit$path_av_theta[-1,]
test <- diagnosis_pNorm(st_fit, LABEL = 'path_av_theta')
length(test)
length(st_fit$iterations_subset)
gg_norm <- tibble(iter = st_fit$iterations_subset[-1], check = test) %>%
ggplot(aes(x = iter, y = check))+
geom_line()+
geom_hline(yintercept = check_level, linetype = 'dashed')
plotly::ggplotly(gg_norm)
p <- 20; q <- 2; n <- 100
constrMat <- build_constrMat(p,q,'simple')
true_load <- gen_loadings(FIXED = NULL, CONSTRAINT_MAT = constrMat, SEED = seed)
true_tau <- c(-1.2, 0, 1.2)
mat <- matrix(runif(q*q, 0.3,.7),q,q)
mat[!lower.tri(mat)] <- 0
mat <- mat + t(mat)
diag(mat) <- 1
true_latent <- mat
#true_latent <- matrix(.212,q,q); diag(true_latent) <- 1
# true_latent <- matrix(c(1,0.5995658,0.4935413,
#   0.5995658,1,0.6684667,
#   0.4935413,0.6684667,1),q,q)
true_theta <- get_theta(rep(true_tau, p), true_load, true_latent, cat, constrMat, 0)
seed1 <- 16
manifest <- gen_URV_data(n, true_load, true_tau, true_latent,
SEED = seed1)
categories <- apply(manifest, 2, max) + 1
categories
apply(manifest, 2, max)
freq_tab <- pairs_freq(manifest, categories)
freq_tab
p <- 10; q <- 2; n <- 100
constrMat <- build_constrMat(p,q,'simple')
true_load <- gen_loadings(FIXED = NULL, CONSTRAINT_MAT = constrMat, SEED = seed)
true_tau <- c(-1.2, 0, 1.2)
mat <- matrix(runif(q*q, 0.3,.7),q,q)
mat[!lower.tri(mat)] <- 0
mat <- mat + t(mat)
diag(mat) <- 1
true_latent <- mat
#true_latent <- matrix(.212,q,q); diag(true_latent) <- 1
# true_latent <- matrix(c(1,0.5995658,0.4935413,
#   0.5995658,1,0.6684667,
#   0.4935413,0.6684667,1),q,q)
true_theta <- get_theta(rep(true_tau, p), true_load, true_latent, cat, constrMat, 0)
seed1 <- 16
manifest <- gen_URV_data(n, true_load, true_tau, true_latent,
SEED = seed1)
categories <- apply(manifest, 2, max) + 1
freq_tab <- pairs_freq(manifest, categories)
freq_tab
freq_tab[,1:10]
freq_tab[,1:20]
freq_tab[,1:16]
manifest1[1,1] <-NA
manifest1 <- manifest
manifest1[1,1] <-NA
manifest1
freq_tab1 <- pairs_freq(manifest, categories)
freq_tab1[,1:16]
freq_tab[,1:16]
manifest
freq_tab
freq_tab[,1:16]
freq_tab1[,1:16]
freq_tab1 <- pairs_freq(manifest1, categories)
freq_tab1[,1:16]
library(plCFA)
library(plCFA)
