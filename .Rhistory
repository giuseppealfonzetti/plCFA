select(id, everything())
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
t(b%*%a)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
t(b%*%a)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 4)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
f <- t(b%*%a)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
f <- t(b%*%a)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
?MASS::mvrnorm
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
MASS::mvrnorm(n = SAMPLE_SIZE)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
MASS::mvrnorm(n = SAMPLE_SIZE)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, col(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncols(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- t(b%*%a)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
f <- t(b%*%a)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
f <- crossprod(b, a)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
f <- crossprod(b, a)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
f <- crossprod(b, a)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
mvrnormR <- function(n, mu, sigma) {
ncols <- ncol(sigma)
mu <- rep(mu, each = n) ## not obliged to use a matrix (recycling)
mu + matrix(rnorm(n * ncols), ncol = ncols) %*% chol(sigma)
}
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- crossprod(b, a)
mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#f <- crossprod(b, a)
mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
library(plCFA)
library(plCFA)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
matrixprod(t(b), a)
#f <- crossprod(b, a)
#mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
matrixprod(t(b), a)
#f <- crossprod(b, a)
#mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
#errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
matrixprod(t(b), a)
#f <- crossprod(b, a)
#mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test
library(plCFA)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
#matrixprod(t(b), a)
#f <- crossprod(b, a)
#mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test
matrixprod(matrix(rnorm(4),2,2),matrix(rnorm(4),2,2))
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
SAMPLE_SIZE <- x$n
LOADINGS <- true_load
THRESHOLDS <- true_tau
LATENT_COV <- true_latent
SEED <- x$sim_id
p <- nrow(LOADINGS)
error_variance <- diag(1, p, p) - diag(diag(LOADINGS%*%LATENT_COV%*%t(LOADINGS)),p,p)
errors <- rmvn(SAMPLE_SIZE = SAMPLE_SIZE, VAR = error_variance)
dim <- ncol(error_variance)
#a <- matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
a <- matrix(rep(1,dim*SAMPLE_SIZE), dim, SAMPLE_SIZE)
b <- t(chol(error_variance))
VAR <- error_variance
errors
#matrixprod(t(b), a)
#f <- crossprod(b, a)
#mvrnormR(SAMPLE_SIZE, 0, VAR)
#MASS::mvrnorm(n = SAMPLE_SIZE, mu = rep(0, ncol(VAR)), Sigma = VAR)
#t(t(chol(VAR))%*%matrix(rnorm(dim*SAMPLE_SIZE), dim, SAMPLE_SIZE))
}, cl = 2)
test
seed <- 1
set.seed(seed)
p <- 20; q <- 2; n <- 2000
constrMat <- build_constrMat(p,q,'simple')
true_load <- gen_loadings(FIXED = NULL, CONSTRAINT_MAT = constrMat, SEED = seed)
true_tau <- c(-1.2, 0, 1.2)
mat <- matrix(runif(q*q, 0.3,.7),q,q)
mat[!lower.tri(mat)] <- 0
mat <- mat + t(mat)
diag(mat) <- 1
true_latent <- mat
#true_latent <- matrix(runif(q*q, 0,1),q,q); diag(true_latent) <- 1
true_theta <- get_theta(rep(true_tau, p), true_load, true_latent, cat, constrMat, 0)
manifest <- gen_URV_data(n, true_load, true_tau, true_latent)
categories <- apply(manifest, 2, max) + 1 ### number of categories in each item
lambda0_init <- c()
s <- 0
CONSTRMAT <- constrMat
for (i in 1:length(categories)) {
vec <- 1:(categories[i]-1)
vec <- (vec -min(vec))/(max(vec)-min(vec))*(2)-1
lambda0_init[(s + 1):(s + categories[i] - 1)] <- vec
s <- s + categories[i] - 1
}
lambda_init = rep(0.5, sum(CONSTRMAT))
transformed_rhos_init = rep(0, q*(q-1)/2)
PL_BFGS <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'ucminf',
CPP_CONTROL = cpp_ctrl,
INIT = NULL
)
PL_BFGS
K = p*(p-1)/2; K
cpp_ctrl <- list(
MAXT = K*20,
BURN = 500,
ETA = 7,
PAIRS_PER_ITERATION = 1,
PROB = 5/K
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_1 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = my_seq
)
mean((st_1$theta-true_theta)^2)
mean((PL_BFGS$theta-true_theta)^2)
test <- bapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
data <- gen_URV_data(x$n, true_load, true_tau, true_latent, SEED = x$sim_id)
data
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
data <- gen_URV_data(x$n, true_load, true_tau, true_latent, SEED = x$sim_id)
data
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
data <- gen_URV_data(x$n, true_load, true_tau, true_latent, SEED = x$sim_id)
data
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
data <- gen_URV_data(x$n, true_load, true_tau, true_latent, SEED = x$sim_id)
suppressMessages(
mod_obj <- fit_plCFA(
DATA_LIST = list('DATA' = data, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'ucminf',
CPP_CONTROL = list(),
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
)
mod_obj
}, cl = 2)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
data <- gen_URV_data(x$n, true_load, true_tau, true_latent, SEED = x$sim_id)
suppressMessages(
mod_obj <- fit_plCFA(
DATA_LIST = list('DATA' = data, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'ucminf',
CPP_CONTROL = list(),
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
)
mod_obj
}, cl = 1)
test <- pbapply::pblapply(purrr::transpose(.l = sim_setting), function(x){
data <- gen_URV_data(x$n, true_load, true_tau, true_latent, SEED = x$sim_id)
suppressMessages(
mod_obj <- fit_plCFA(
DATA_LIST = list('DATA' = data, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'ucminf',
CPP_CONTROL = list(),
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
)
mod_obj
}, cl = 2)
