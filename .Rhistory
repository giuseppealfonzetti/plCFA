#     get_tidy_path(st_128, lab) %>%
#         mutate(mod = 'nu64')
# ) %>%
mutate(
thresholds = map_dbl(path_av_theta, ~mean((.x[1:length(true_tau)]-true_theta[1:length(true_tau)])^2)),
loadings = map_dbl(path_av_theta, ~mean((get_lambda(.x, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2)),
corr = map_dbl(path_av_theta, ~mean((get_corr(.x, constrMat)-get_corr(true_theta, constrMat))^2))
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
bfgs_tab <- tibble(
thresholds = mean((PL_BFGS$theta[1:length(true_tau)]-true_theta[1:length(true_tau)])^2),
loadings = mean((get_lambda(PL_BFGS$theta, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2),
corr = mean((get_corr(PL_BFGS$theta, constrMat)-get_corr(true_theta, constrMat))^2)
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
gg <- ggplot()+
geom_line(data = par_tab, aes(x = iter, y = log(mse), col = mod), alpha = .8, size = .5) +
geom_hline(data = bfgs_tab, aes(yintercept = log(mse)), linetype = 'dashed')+
facet_wrap(vars(par), scales = 'free')+
theme_minimal()
plotly::ggplotly(gg, dynamicTicks = T)
# get_Sigma_u(constrMat, obj$theta)
# get_Sigma_u(con
PL_BFGS
PL_BFGS$theta
PL_BFGS$theta[(lenght(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
PL_BFGS$theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
true
true_theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
get_Sigma_u(PL_BFGS$theta, constrMat)
constrMat
get_Sigma_u(PL_BFGS$theta, constrMat)
get_Sigma_u(true_theta, constrMat)
library(plCFA)
library(plCFA)
library(RcppClock)
seed <- 1
set.seed(seed)
p <- 40; q <- 8; n <- 10000
constrMat <- build_constrMat(p,q,'simple')
true_load <- gen_loadings(FIXED = NULL, CONSTRAINT_MAT = constrMat, SEED = seed)
true_tau <- c(-1.2, 0, 1.2)
mat <- matrix(runif(q*q, .3,.7),q,q)
mat[!lower.tri(mat)] <- 0
mat <- mat + t(mat)
diag(mat) <- 1
true_latent <- as.matrix(Matrix::nearPD(mat)$mat)
#true_latent <- clusterGeneration::rcorrmatrix(d = q)
#true_latent <- matrix(.6,q,q); diag(true_latent) <- 1
# true_latent <- matrix(c(1,0.5995658,0.4935413,
#   0.5995658,1,0.6684667,
#   0.4935413,0.6684667,1),q,q)
true_theta <- get_theta(rep(true_tau, p), true_load, true_latent, cat, constrMat, 0)
seed1 <- 1
manifest <- gen_URV_data(n, true_load, true_tau, true_latent,
SEED = seed1)
PL_BFGS <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'ucminf',
CPP_CONTROL = cpp_ctrl,
INIT = NULL
)
library(RcppClock)
seed <- 1
set.seed(seed)
p <- 30; q <- 6; n <- 10000
constrMat <- build_constrMat(p,q,'simple')
true_load <- gen_loadings(FIXED = NULL, CONSTRAINT_MAT = constrMat, SEED = seed)
true_tau <- c(-1.2, 0, 1.2)
mat <- matrix(runif(q*q, .3,.7),q,q)
mat[!lower.tri(mat)] <- 0
mat <- mat + t(mat)
diag(mat) <- 1
true_latent <- as.matrix(Matrix::nearPD(mat)$mat)
#true_latent <- clusterGeneration::rcorrmatrix(d = q)
#true_latent <- matrix(.6,q,q); diag(true_latent) <- 1
# true_latent <- matrix(c(1,0.5995658,0.4935413,
#   0.5995658,1,0.6684667,
#   0.4935413,0.6684667,1),q,q)
true_theta <- get_theta(rep(true_tau, p), true_load, true_latent, cat, constrMat, 0)
seed1 <- 1
manifest <- gen_URV_data(n, true_load, true_tau, true_latent,
SEED = seed1)
PL_BFGS <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'ucminf',
CPP_CONTROL = cpp_ctrl,
INIT = NULL
)
#     PROB = .1,
#     SEED = seed1
# )
# stepsize_tuning(
#     DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
#     METHOD = 'st_hyper',
#     CPP_CONTROL = cpp_ctrl,
#     STEPSIZE_GRID = c(.5,.25,.1,.05,.025,.01, .005, .001),
#     INIT = NULL
# )
d <- length(true_theta)
K = p*(p-1)/2; K
K/8
nu <- 8;
sqrt(K/(nu*n))
1/sqrt(K/(nu*n))
eta <- 3e-3
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 8,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_8 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 16,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_16 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 32,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_32 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
# cpp_ctrl <- list(
#     MAXT = 2000,
#     BURN = 1000,
#     ETA = 3e-3,
#     PAIRS_PER_ITERATION = 256,
#     PROB = 5/K,
#     SEED = seed1
# )
# my_seq <- seq(0, cpp_ctrl$MAXT, 100)
# st_128 <- fit_plCFA(
#     DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
#     METHOD = 'st_hyper',
#     CPP_CONTROL = cpp_ctrl,
#     INIT = NULL,
#     ITERATIONS_SUBSET = NULL
# )
# mean((st_1$theta-true_theta)^2)
# mean((st_4$theta-true_theta)^2)
mean((st_8$theta-true_theta)^2)
mean((st_16$theta-true_theta)^2)
mean((st_32$theta-true_theta)^2)
# mean((st_128$theta-true_theta)^2)
mean((PL_BFGS$theta-true_theta)^2)
PL_BFGS$theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
true_theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
get_Sigma_u(PL_BFGS$theta, constrMat)
get_Sigma_u(true_theta, constrMat)
# st_1$clock[1,2]*st_1$clock[1,6]
# st_4$clock[1,2]*st_4$clock[1,6]
st_8$clock[1,2]*st_8$clock[1,6]
st_16$clock[1,2]*st_16$clock[1,6]
st_32$clock[1,2]*st_32$clock[1,6]
# st_128$clock[1,2]*st_128$clock[1,6]
PL_BFGS$num_time
library(tidyverse)
lab <- 'path_av_theta'
par_tab <- get_tidy_path(st_8, lab) %>%
mutate(mod = 'nu8') %>%
# bind_rows(
#     get_tidy_path(st_4, lab) %>%
#         mutate(mod = 'nu4')
# ) %>%
# bind_rows(
#     get_tidy_path(st_8, lab) %>%
#         mutate(mod = 'nu8')
# ) %>%
bind_rows(
get_tidy_path(st_16, lab) %>%
mutate(mod = 'nu16')
) %>%
bind_rows(
get_tidy_path(st_32, lab) %>%
mutate(mod = 'nu32')
) %>%
# bind_rows(
#     get_tidy_path(st_128, lab) %>%
#         mutate(mod = 'nu64')
# ) %>%
mutate(
thresholds = map_dbl(path_av_theta, ~mean((.x[1:length(true_tau)]-true_theta[1:length(true_tau)])^2)),
loadings = map_dbl(path_av_theta, ~mean((get_lambda(.x, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2)),
corr = map_dbl(path_av_theta, ~mean((get_corr(.x, constrMat)-get_corr(true_theta, constrMat))^2))
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
categories <- apply(manifest, 2, max) + 1 ### number of categories in each item
par_tab <- get_tidy_path(st_8, lab) %>%
mutate(mod = 'nu8') %>%
# bind_rows(
#     get_tidy_path(st_4, lab) %>%
#         mutate(mod = 'nu4')
# ) %>%
# bind_rows(
#     get_tidy_path(st_8, lab) %>%
#         mutate(mod = 'nu8')
# ) %>%
bind_rows(
get_tidy_path(st_16, lab) %>%
mutate(mod = 'nu16')
) %>%
bind_rows(
get_tidy_path(st_32, lab) %>%
mutate(mod = 'nu32')
) %>%
# bind_rows(
#     get_tidy_path(st_128, lab) %>%
#         mutate(mod = 'nu64')
# ) %>%
mutate(
thresholds = map_dbl(path_av_theta, ~mean((.x[1:length(true_tau)]-true_theta[1:length(true_tau)])^2)),
loadings = map_dbl(path_av_theta, ~mean((get_lambda(.x, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2)),
corr = map_dbl(path_av_theta, ~mean((get_corr(.x, constrMat)-get_corr(true_theta, constrMat))^2))
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
bfgs_tab <- tibble(
thresholds = mean((PL_BFGS$theta[1:length(true_tau)]-true_theta[1:length(true_tau)])^2),
loadings = mean((get_lambda(PL_BFGS$theta, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2),
corr = mean((get_corr(PL_BFGS$theta, constrMat)-get_corr(true_theta, constrMat))^2)
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
gg <- ggplot()+
geom_line(data = par_tab, aes(x = iter, y = log(mse), col = mod), alpha = .8, size = .5) +
geom_hline(data = bfgs_tab, aes(yintercept = log(mse)), linetype = 'dashed')+
facet_wrap(vars(par), scales = 'free')+
theme_minimal()
plotly::ggplotly(gg, dynamicTicks = T)
library(plCFA)
eta <- 3e-3
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 8,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_8 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 16,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_16 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 32,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_32 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
# cpp_ctrl <- list(
#     MAXT = 2000,
#     BURN = 1000,
#     ETA = 3e-3,
#     PAIRS_PER_ITERATION = 256,
#     PROB = 5/K,
#     SEED = seed1
# )
# my_seq <- seq(0, cpp_ctrl$MAXT, 100)
# st_128 <- fit_plCFA(
#     DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
#     METHOD = 'st_hyper',
#     CPP_CONTROL = cpp_ctrl,
#     INIT = NULL,
#     ITERATIONS_SUBSET = NULL
# )
# mean((st_1$theta-true_theta)^2)
# mean((st_4$theta-true_theta)^2)
mean((st_8$theta-true_theta)^2)
mean((st_16$theta-true_theta)^2)
mean((st_32$theta-true_theta)^2)
# mean((st_128$theta-true_theta)^2)
mean((PL_BFGS$theta-true_theta)^2)
PL_BFGS$theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
true_theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
get_Sigma_u(PL_BFGS$theta, constrMat)
get_Sigma_u(true_theta, constrMat)
# st_1$clock[1,2]*st_1$clock[1,6]
# st_4$clock[1,2]*st_4$clock[1,6]
st_8$clock[1,2]*st_8$clock[1,6]
st_16$clock[1,2]*st_16$clock[1,6]
st_32$clock[1,2]*st_32$clock[1,6]
# st_128$clock[1,2]*st_128$clock[1,6]
PL_BFGS$num_time
library(tidyverse)
lab <- 'path_av_theta'
par_tab <- get_tidy_path(st_8, lab) %>%
mutate(mod = 'nu8') %>%
# bind_rows(
#     get_tidy_path(st_4, lab) %>%
#         mutate(mod = 'nu4')
# ) %>%
# bind_rows(
#     get_tidy_path(st_8, lab) %>%
#         mutate(mod = 'nu8')
# ) %>%
bind_rows(
get_tidy_path(st_16, lab) %>%
mutate(mod = 'nu16')
) %>%
bind_rows(
get_tidy_path(st_32, lab) %>%
mutate(mod = 'nu32')
) %>%
# bind_rows(
#     get_tidy_path(st_128, lab) %>%
#         mutate(mod = 'nu64')
# ) %>%
mutate(
thresholds = map_dbl(path_av_theta, ~mean((.x[1:length(true_tau)]-true_theta[1:length(true_tau)])^2)),
loadings = map_dbl(path_av_theta, ~mean((get_lambda(.x, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2)),
corr = map_dbl(path_av_theta, ~mean((get_corr(.x, constrMat)-get_corr(true_theta, constrMat))^2))
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
bfgs_tab <- tibble(
thresholds = mean((PL_BFGS$theta[1:length(true_tau)]-true_theta[1:length(true_tau)])^2),
loadings = mean((get_lambda(PL_BFGS$theta, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2),
corr = mean((get_corr(PL_BFGS$theta, constrMat)-get_corr(true_theta, constrMat))^2)
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
gg <- ggplot()+
geom_line(data = par_tab, aes(x = iter, y = log(mse), col = mod), alpha = .8, size = .5) +
geom_hline(data = bfgs_tab, aes(yintercept = log(mse)), linetype = 'dashed')+
facet_wrap(vars(par), scales = 'free')+
theme_minimal()
plotly::ggplotly(gg, dynamicTicks = T)
# get_Sigma_u(constrMat, obj$theta)
library(plCFA)
eta <- 3e-3
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 8,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_8 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 16,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_16 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
cpp_ctrl <- list(
MAXT = K*20,
BURN = K*5,
ETA = eta,
PAIRS_PER_ITERATION = 32,
PROB = 5/K,
SEED = seed1
)
my_seq <- seq(0, cpp_ctrl$MAXT, 100)
st_32 <- fit_plCFA(
DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
METHOD = 'st_hyper',
CPP_CONTROL = cpp_ctrl,
INIT = NULL,
ITERATIONS_SUBSET = NULL
)
# cpp_ctrl <- list(
#     MAXT = 2000,
#     BURN = 1000,
#     ETA = 3e-3,
#     PAIRS_PER_ITERATION = 256,
#     PROB = 5/K,
#     SEED = seed1
# )
# my_seq <- seq(0, cpp_ctrl$MAXT, 100)
# st_128 <- fit_plCFA(
#     DATA_LIST = list('DATA' = manifest, 'CONSTRMAT' = constrMat, 'CORRFLAG'=1),
#     METHOD = 'st_hyper',
#     CPP_CONTROL = cpp_ctrl,
#     INIT = NULL,
#     ITERATIONS_SUBSET = NULL
# )
# mean((st_1$theta-true_theta)^2)
# mean((st_4$theta-true_theta)^2)
mean((st_8$theta-true_theta)^2)
mean((st_16$theta-true_theta)^2)
mean((st_32$theta-true_theta)^2)
# mean((st_128$theta-true_theta)^2)
mean((PL_BFGS$theta-true_theta)^2)
PL_BFGS$theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
true_theta[(length(true_theta)-(q*(q-1)/2)+1):length(true_theta)]
get_Sigma_u(PL_BFGS$theta, constrMat)
get_Sigma_u(true_theta, constrMat)
# st_1$clock[1,2]*st_1$clock[1,6]
# st_4$clock[1,2]*st_4$clock[1,6]
st_8$clock[1,2]*st_8$clock[1,6]
st_16$clock[1,2]*st_16$clock[1,6]
st_32$clock[1,2]*st_32$clock[1,6]
# st_128$clock[1,2]*st_128$clock[1,6]
PL_BFGS$num_time
library(tidyverse)
lab <- 'path_av_theta'
par_tab <- get_tidy_path(st_8, lab) %>%
mutate(mod = 'nu8') %>%
# bind_rows(
#     get_tidy_path(st_4, lab) %>%
#         mutate(mod = 'nu4')
# ) %>%
# bind_rows(
#     get_tidy_path(st_8, lab) %>%
#         mutate(mod = 'nu8')
# ) %>%
bind_rows(
get_tidy_path(st_16, lab) %>%
mutate(mod = 'nu16')
) %>%
bind_rows(
get_tidy_path(st_32, lab) %>%
mutate(mod = 'nu32')
) %>%
# bind_rows(
#     get_tidy_path(st_128, lab) %>%
#         mutate(mod = 'nu64')
# ) %>%
mutate(
thresholds = map_dbl(path_av_theta, ~mean((.x[1:length(true_tau)]-true_theta[1:length(true_tau)])^2)),
loadings = map_dbl(path_av_theta, ~mean((get_lambda(.x, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2)),
corr = map_dbl(path_av_theta, ~mean((get_corr(.x, constrMat)-get_corr(true_theta, constrMat))^2))
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
bfgs_tab <- tibble(
thresholds = mean((PL_BFGS$theta[1:length(true_tau)]-true_theta[1:length(true_tau)])^2),
loadings = mean((get_lambda(PL_BFGS$theta, categories, constrMat)-get_lambda(true_theta, categories, constrMat))^2),
corr = mean((get_corr(PL_BFGS$theta, constrMat)-get_corr(true_theta, constrMat))^2)
) %>%
gather(key = 'par', value = 'mse', thresholds, loadings, corr)
gg <- ggplot()+
geom_line(data = par_tab, aes(x = iter, y = log(mse), col = mod), alpha = .8, size = .5) +
geom_hline(data = bfgs_tab, aes(yintercept = log(mse)), linetype = 'dashed')+
facet_wrap(vars(par), scales = 'free')+
theme_minimal()
plotly::ggplotly(gg, dynamicTicks = T)
